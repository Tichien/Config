#!/bin/bash

SET_MSG=false

# modification d'origin 2
# 
for arg in "$@"; do
	if [ "$arg" = "--help" ]; then
		
		echo "USAGE:"
		echo ""
		echo "$0 [OPTIONS]..."
		echo ""
		echo "DESCRIPTION:"
		echo ""
		echo "Ce script a pour but de mettre à jour la branche locale"
		echo ""
		echo "Si la branche locale a du retard par rapport à master alors"
		echo "les données de la branche locale et de master seront fusionnées"
		echo ""
		echo "Si la branche locale a de l'avance par rapport à master alors"
		echo "les données de la branche locale seront mises en ligne vers master"
		echo ""
		echo "Si il y a des fichiers non fusionnés dans la branche locale alors"
		echo "le script proposera des moyens pour regler les problèmes"
		echo ""
		echo "OPTIONS:"
		echo ""
		echo "    --help => affiche l'aide du script"
		echo "    -m <message> => Le message sera envoyées au prochain commit"
		exit 0

	elif [ "$arg" = "-m" ]; then

		SET_MSG=true

	elif [ "$SET_MSG" = true ] && [ -n "$arg" ]; then

		SET_MSG=false
		COMMIT_MSG="$arg"
	fi
done

# Definition de variables et de fonctions:

# Couleur à utiliser (ex: printf "${COLOR}text${NC}" => affiche "text" en rouge)
RED='\033[0;31m' # Red color
NC='\033[0m' # Normal color

# Renvoie vrai si des changements ont étaient apportés à la branche master, renvoie faux sinon
branch_is_late(){
	result=$(git diff --name-only master origin)
	# Test si result est une chaine non nulle
	[ -n "$result" ]
}

# Renvoie vrai si des changements ont étaient apportés à la branche locale, renvoie faux sinon
branch_is_ahead(){
	result=$(git diff --name-only)
	# Test si result est une chaine non nulle
	[ -n "$result" ]
}

# Renvoie vrai si des conflits ont empechés la fusion de certains fichiers de la branche locale avec master, renvoie faux sinon
unmergedfile (){
	result=$(git diff --name-only --diff-filter=U)
    # Test si result est une chaine non nulle
    [ -n "$result" ]
}

unpushedfile (){
	result=$(git log origin/master..HEAD)

	[ -n "$result" ]
}

# Commission de tous les changements apportés à la branche locale
commitall () {
	git add -A
	
	if [ -z "$COMMIT_MSG" ]; then

		read -p "Veuillez décrire les changements apportés : " COMMIT_MSG
		echo ""

		if [ -z "$COMMIT_MSG" ]; then
			COMMIT_MSG="Mise à jour du $(date)"
		fi
	fi

	echo "-Commission des données locales..."
	git commit -m "$COMMIT_MSG"
	echo "-Fait"
	echo ""
}

# Met en ligne les données locales mofifiées/ajoutées
pushall () {
	echo "-Mise en ligne des données locales..."
	git push origin master
	echo "-Fait"
	echo ""
}

# Fusionne les données de la branche locale avec les données de master
pullall () {
	echo "-Fusion des données locales avec les données de master..."
	git pull 
	echo "-Fait"
	echo ""
}

# Va chercher tous les changements de toutes les branches en ligne
# ce qui permettra de voir si il y a eu des add, delete, modification etc...
# quite le script si la connexion est impossible
fetchall () {

	echo "-Recherche des données en ligne..."

	connexion=$(git fetch --all 2>&1)
	failure=$(echo "$connexion" | grep "unable to access")

	if [ -n "$failure" ]
	then
		echo "La connexion est impossible ou la remote n'existe pas"
		echo ""
		echo "$failure"
		exit 1
	else
		echo "$connexion"
	fi

	echo "-Fait"
	echo ""
}

# Debut du script:

fetchall

if unpushedfile; then
	echo "Attention des données n'ont pas été mises en ligne, cela est necessaire pour la mise à jour !"
	echo ""

	git log origin/master..HEAD
	echo ""

	read -r -p "Voulez-vous mettre en ligne ces données ? [y/n] " response
	echo ""

	if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
		pushall
	else
		echo "Mise à jour annulée !"
		exit 0
	fi

	if unpushedfile; then
		echo "La mise en ligne des données a échoué !"
		exit 0
	fi
	echo "La mise en ligne des données reussi !"
	echo ""
fi

if branch_is_late; then

	if unmergedfile; then

		UNMERGED=$(git diff --name-only --diff-filter=U)

		echo "Attention les fichiers suivants n'ont pas été fusionnés :"
		echo ""
		printf "${RED}$UNMERGED${NC}" # Affiche les fichiers non fusionnées en rouge
		echo ""
		echo ""

		read -r -p "Voulez-vous quitter pour résoudre le problème manuellement ? [y/n] " response
		echo ""

		# Si la réponse est oui, on quitte le script
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
			echo "Aucun changement n'a été effectué, vous pouvez modifier les fichiers un par un puis envoyer les changements à master avec git add, git commit, git push"
			exit
		else
			printf "${RED}Attention, répondez positivement seulement si vous savez ce que vous faites !${NC}"
			echo ""
			echo ""

			read -r -p "Voulez-vous resoudre le problème en ecrasant les fichiers de master avec les fichiers de la branche locale ? [y/n] " response
			echo ""

			# Si la réponse est oui, on envoi les données en ligne
			if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
				commitall
				pushall
			else
				read -r -p "Dans ce cas voulez-vous ecraser les fichiers de la branche locale avec les fichiers de master ? [y/n] " response
				echo ""
			
				# Si la réponse est oui, on affiche le status de la branche locale et on demande une confirmation
				if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
					git status
					echo ""

					read -r -p "Attention les données qui n'ont pas été envoyées en ligne seront perdus, continuer ? [y/n] " response
					echo ""
				
					# Si la réponse est oui, on réinitialise la branche locale à partir de master
					if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
						git reset --hard origin/master
					else
						echo "Aucun changement n'a été effectué, vous pouvez modifier les fichiers un par un puis envoyer les changements à master avec git add, git commit, git push"
					fi
				else
					echo "Aucun changement n'a été effectué, vous pouvez modifier les fichiers un par un puis envoyer les changements à master avec git add, git commit, git push"
				fi
			fi
		fi
	else
		if branch_is_ahead; then
			commitall
		else
			echo "-Aucune commission des données locale n'est à faire"
			echo ""	
		fi
		
		DIFFERENCES=$(git diff --name-status master origin)

		echo "La branche locale à du retard sur master, Une mise à jour est necessaire"
		echo ""
		printf "${RED}$DIFFERENCES${NC}"
		echo ""
		echo ""
			
		read -r -p "Voulez-vous mettre à jour la branche locale et fusionner les fichiers ci-dessus ? [y/n] " response
		echo ""
			
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
			
			pullall

			# Si il y des conflits on envoi un message d'avertissement
			if unmergedfile; then
				printf "${RED}Attention des conflits on été detectés !${NC}"
				echo ""
				echo ""
				echo "Veillez à bien resoudre les conflits avant la prochaine mise à jour"
				echo ""
			else
				pushall
			fi
		else
			echo "Mise à jour annulée"
		fi
	fi
else
	if branch_is_ahead; then

		echo "-Aquisition du status de la branche locale..."
		git status
		echo "-Fait"
		echo ""

		read -r -p "Mettre à jour master à partir de cette branche ? [y/n] " response
		echo ""
		
		# Si la reponse est oui, on envoi les données en ligne
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
			commitall
			pushall
		else
			echo "Mise à jour de master annulée"
		fi
	else
		echo "Cette branche est identique à master, la mise à jour est terminée"
	fi
fi
